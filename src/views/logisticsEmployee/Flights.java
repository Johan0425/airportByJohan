/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package views.logisticsEmployee;

import controllers.FlightsController;
import enums.Event;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Airline;
import model.Flight;
import util.LSE;

/**
 *
 * @author joanp
 */
public class Flights extends javax.swing.JInternalFrame {

    private final FlightsController controller;
    private final Airline airline;
    private TableRowSorter<DefaultTableModel> sorter;
    private final LogisticsEmployeeTasks view;

    /**
     * Creates new form Flights
     *
     * @param airline
     * @param view
     */
    public Flights(Airline airline, LogisticsEmployeeTasks view) {
        initComponents();
        setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bui = (BasicInternalFrameUI) this.getUI();
        bui.setNorthPane(null);
        setResizable(false);
        setSize(1200, 750);
        this.airline = airline;
        this.view = view;
        controller = new FlightsController(airline);
        fillTable();
    }

    private boolean hasEmptySearchField() {
        return (txtSearch.getText().isEmpty());
    }

    public final void fillTable() {
        DefaultTableModel model = new DefaultTableModel();

        LSE<Flight> flights = controller.getFlights();
        model.setColumnIdentifiers(new Object[]{
            "ID", "Capitan", "Avi√≥n", "Fecha", "Hora", "Origen", "Destino", "Tiempo aprox"
        });

        flightsTable.setModel(model);

        flightsTable.setAutoCreateRowSorter(true);
        sorter = new TableRowSorter<>(model);
        flightsTable.setRowSorter(sorter);

        List<Flight> flightList = new ArrayList<>(flights.size());

        for (int i = 0; i < flights.size(); i++) {
            Flight flight = flights.get(i);
            flightList.add(flight);
            model.addRow(new Object[]{
                flight.getId(),
                flight.getCaptain().getFullname(),
                flight.getAirplane().getModel(),
                flight.getDate(),
                flight.getHour(),
                flight.getOrigin(),
                flight.getDestination(),
                flight.getAproximateTime()
            });
        }

        Comparator<Flight> dateTimeComparator = Comparator.comparing(
                flight -> LocalDateTime.of(flight.getDate(), flight.getHour())
        );

        flightList.sort(dateTimeComparator);

        for (int i = 0; i < flightList.size(); i++) {
            Flight flight = flightList.get(i);
            model.setValueAt(flight.getId(), i, 0);
            model.setValueAt(flight.getCaptain().getFullname(), i, 1);
            model.setValueAt(flight.getAirplane().getModel(), i, 2);
            model.setValueAt(flight.getDate(), i, 3);
            model.setValueAt(flight.getHour(), i, 4);
            model.setValueAt(flight.getOrigin(), i, 5);
            model.setValueAt(flight.getDestination(), i, 6);
            model.setValueAt(flight.getAproximateTime(), i, 7);
        }
    }

    private void filter() {
        String filterText = txtSearch.getText();
        RowFilter<Object, Object> idFilter = RowFilter.regexFilter(filterText.trim(), 0);
        sorter.setRowFilter(RowFilter.orFilter(Arrays.asList(idFilter, idFilter)));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightsTable = new javax.swing.JTable();
        btnNew = new javax.swing.JButton();
        btnGestion = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(0, 102, 153));
        btnDelete.setText("ELIMINAR");
        btnDelete.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 153), 2, true));
        btnDelete.setContentAreaFilled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 153));
        jLabel1.setText("BUSCAR:");

        txtSearch.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        txtSearch.setBorder(null);
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(0, 102, 153));
        jSeparator1.setForeground(new java.awt.Color(0, 102, 153));

        flightsTable.setBackground(new java.awt.Color(255, 255, 255));
        flightsTable.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        flightsTable.setForeground(new java.awt.Color(0, 102, 153));
        flightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(flightsTable);

        btnNew.setBackground(new java.awt.Color(255, 255, 255));
        btnNew.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        btnNew.setForeground(new java.awt.Color(0, 102, 153));
        btnNew.setText("NUEVO");
        btnNew.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 153), 2, true));
        btnNew.setContentAreaFilled(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnGestion.setBackground(new java.awt.Color(255, 255, 255));
        btnGestion.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        btnGestion.setForeground(new java.awt.Color(0, 102, 153));
        btnGestion.setText("GESTIONAR");
        btnGestion.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 153), 2, true));
        btnGestion.setContentAreaFilled(false);
        btnGestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGestionActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(255, 255, 255));
        btnSearch.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(0, 102, 153));
        btnSearch.setText("BUSCAR");
        btnSearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 153), 2, true));
        btnSearch.setContentAreaFilled(false);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(jLabel1)
                        .addGap(66, 66, 66)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator1)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 968, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(136, 136, 136)
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(btnGestion, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(103, 103, 103)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(131, 131, 131)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(127, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGestion, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(197, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selected = flightsTable.getSelectedRow();

        if (selected >= 0) {

            String id = flightsTable.getModel().getValueAt(selected, 0).toString();

            int answer = JOptionPane.showConfirmDialog(null, "¬øEst√° seguro de eliminar el vuelo "
                    + id + "?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);

            if (answer == 0) {
                controller.deleteFlight(Integer.parseInt(id));
                fillTable();
                JOptionPane.showMessageDialog(null, "Vuelo eliminado correctamente");

//                this.fli = flight;
//                this.evt = Event.DELETE;
//                controller.addToZ(fli);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un vuelo de la tabla");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        filter();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        view.validateDesktop();
        view.openRegisterFlight(airline, this);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnGestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGestionActionPerformed
        int selected = flightsTable.getSelectedRow();

        if (selected >= 0) {

            int id = Integer.parseInt(flightsTable.getModel().getValueAt(selected, 0).toString());
            Flight flight = controller.searchFlight(id);

            if (flight != null) {
                view.validateDesktop();
                view.openUpdatedFlightView(airline, flight, this);
            } else {
                System.out.println("es null");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un vuelo de la tabla");
        }
    }//GEN-LAST:event_btnGestionActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (hasEmptySearchField()) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un id a la hora de buscar");
            return;
        }
        int id = Integer.parseInt(txtSearch.getText());

        Flight flight = controller.searchFlight(id);

        if (flight != null) {
            JOptionPane.showMessageDialog(null, "El vuelo con destino a " + flight.getDestination() + " a mando del capit√°n " + flight.getCaptain().getFullname());
        }
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGestion;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnSearch;
    private javax.swing.JTable flightsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
